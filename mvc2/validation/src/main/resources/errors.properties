#level1이 없으면 level2가, level2가 없으면 level3, 또 없으면 level4가 매칭되는 원리이다.
#level4가 가장 간단하고 보편적인 메시지이고, level1이 가장 복잡하고 세부적인 메시지이다.
#애플리케이션 코드를 변환하지 않고 메시지만 고침으로 인해서 개발 효율성이 높아진다.

#required.item.itemName=상품 이름은 필수입니다.
#range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
#max.item.quantity=수량은 최대 {0} 까지 허용합니다.
#totalPriceMin=가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}

#==ObjectError==
#Level1
totalPriceMin.item=상품의 가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}

#Level2 - 생략
totalPriceMin=전체 가격은 {0}원 이상이어야 합니다. 현재 값 = {1}

#==FieldError==

#Level1
required.item.itemName=상품 이름은 필수입니다.
range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
max.item.quantity=수량은 최대 {0} 까지 허용합니다.

#Level2 - 생략

#Level3
required.java.lang.String = 필수 문자입니다.
required.java.lang.Integer = 필수 숫자입니다.
min.java.lang.String = {0} 이상의 문자를 입력해주세요.
min.java.lang.Integer = {0} 이상의 숫자를 입력해주세요.
range.java.lang.String = {0} ~ {1} 까지의 문자를 입력해주세요.
range.java.lang.Integer = {0} ~ {1} 까지의 숫자를 입력해주세요.
max.java.lang.String = {0} 까지의 문자를 허용합니다.
max.java.lang.Integer = {0} 까지의 숫자를 허용합니다.

#Level4
required = 필수 값 입니다.
min= {0} 이상이어야 합니다.
range= {0} ~ {1} 범위를 허용합니다.
max= {0} 까지 허용합니다.


#추가
typeMismatch.java.lang.Integer=숫자를 입력해주세요.
typeMismatch=타입 오류입니다.

#Bean Validation 추가
#{0}은 필드명을 말한다.

NotBlank={0} 공백X
Range={0}, {2} ~ {1} 허용
Max={0}, 최대 {1}

#좀 더 높은 레벨의 메시지를 원한다면 아래와 같이 적어주면 된다. 아래의 표현이 해당 필드에 좀 더 직접적이다.
# 그리고 따라서 우선순위가 높고, 이는 레벨이 더 높다는 것을 의미한다. 때문에 해당 메시지가 송출된다.
NotBlank.item.itemName=상품이름을 적어주세요.
#만약 이 메시지가 없다면, 한 단계 아래의 표현인 NotBlank={0} 공백X가 송출된다. 이마저도 없다면 Item.java에 직접 붙어 있는 annotation의 메시지가 송출된다.